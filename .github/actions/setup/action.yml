name: 'Setup Development Environment'
description: 'Setup Docker, WordPress and dependencies'

inputs:
  mode:
    description: 'Mode: production or develop'
    required: false
    default: 'develop'
  mariadb_tag:
    description: 'MariaDB tag'
    required: false
    default: 'latest'
  wordpress_tag:
    description: 'WordPress tag'  
    required: false
    default: 'latest'
  node_tag:
    description: 'Node tag'
    required: false
    default: '22'
  plugin_name:
    description: 'Plugin name'
    required: true
  github_token:
    description: "GitHub Token"
    required: true
  svn_username:
    description: "SVN Username"
    required: false
    default: ''
  svn_password:
    description: "SVN Password"
    required: false
    default: ''
  crowdin_project_id:
    description: "Crowdin Project ID"
    required: false
    default: ''
  crowdin_personal_token:
    description: "Crowdin Personal Token"
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ inputs.mariadb_tag }}-${{ inputs.wordpress_tag }}-${{ inputs.node_tag }}-${{ hashFiles('**/Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ inputs.mariadb_tag }}-${{ inputs.wordpress_tag }}-${{ inputs.node_tag }}-

    - name: Cache npm modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ inputs.node_tag }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ inputs.node_tag }}-

    - name: Create .env file
      shell: bash
      run: |
        cp .env.dist .env
        # Update variables if provided
        if [ -n "${{ inputs.github_token }}" ]; then
          sed -i "s/^GITHUB_TOKEN=.*/GITHUB_TOKEN=${{ inputs.github_token }}/" .env
        fi
        if [ -n "${{ inputs.svn_username }}" ]; then
          sed -i "s/^SVN_USERNAME=.*/SVN_USERNAME=${{ inputs.svn_username }}/" .env
        fi
        if [ -n "${{ inputs.svn_password }}" ]; then
          sed -i "s/^SVN_PASSWORD=.*/SVN_PASSWORD=${{ inputs.svn_password }}/" .env
        fi
        if [ -n "${{ inputs.crowdin_project_id }}" ]; then
          sed -i "s/^CROWDIN_PROJECT_ID=.*/CROWDIN_PROJECT_ID=${{ inputs.crowdin_project_id }}/" .env
        fi
        if [ -n "${{ inputs.crowdin_personal_token }}" ]; then
          sed -i "s/^CROWDIN_PERSONAL_TOKEN=.*/CROWDIN_PERSONAL_TOKEN=${{ inputs.crowdin_personal_token }}/" .env
        fi

    # method #1
    - name: Install mkcert
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install libnss3-tools
        curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
        chmod +x mkcert-v*-linux-amd64
        sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert

    # method #2
    #- name: Generate self-signed CA
    #  uses: kofemann/action-create-certificate@v0.0.4
    #  with:
    #    hostcert: 'server.crt'
    #    hostkey: 'server.key'
    #    cachain: 'ca-chain.pem'

    #- name: Move certificates
    #  run: |
    #    mkdir -p tmp/certs
    #    mv server.crt server.key ca-chain.pem tmp/certs/

    - name: Run Makefile 'all' task
      shell: bash
      # Variables are passed as Make parameters because the Makefile includes .env
      # which overrides environment variables, so using env: would be ignored.
      # See comment in Makefile before "include .env".
      run: |
        make \
          MODE=${{ inputs.mode }} \
          MARIADB_TAG=${{ inputs.mariadb_tag }} \
          WORDPRESS_TAG=${{ inputs.wordpress_tag }} \
          NODE_TAG=${{ inputs.node_tag }} \
          PLUGIN_NAME=${{ inputs.plugin_name }}

    #https://cardinalby.github.io/blog/post/github-actions/implementing-deferred-steps/
    # method #1
    #- name: Wait for WordPress setup to complete
    #  run: |
    #    timeout=300
    #    while [ $timeout -gt 0 ]; do
    #      docker compose exec wordpress test -f /bitnami/wordpress/wp-config.php && break
    #      echo "Waiting for wp-config.php ($timeout seconds left)..."
    #      sleep 5
    #      timeout=$((timeout - 5))
    #    done
    #    [ $timeout -gt 0 ] || { echo "‚ùå Error: Timeout reached, wp-config.php not found"; exit 1; }

    # method #2
    - name: Wait for WordPress setup to complete
      shell: bash
      run: ./docker/logs-catcher.sh wordpress "WordPress setup finished" 180

    - name: Run Makefile 'install' task
      shell: bash
      # Variables are passed as Make parameters because the Makefile includes .env
      # which overrides environment variables, so using env: would be ignored.
      # See comment in Makefile before "include .env".
      run: |
        make install \
          MODE=${{ inputs.mode }} \
          MARIADB_TAG=${{ inputs.mariadb_tag }} \
          WORDPRESS_TAG=${{ inputs.wordpress_tag }} \
          NODE_TAG=${{ inputs.node_tag }} \
          PLUGIN_NAME=${{ inputs.plugin_name }}
